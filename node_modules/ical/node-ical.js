var ical = require('./ical')
  , request = require('request')
  , fs = require('fs');
var zlib = require('zlib');
var stream = require('stream');



var headers = {
  'Accept-Encoding': 'gzip'
};

//
exports.fromURL = function(url, opts, cb){
  if (!cb)
    return;
  var wstream;

  var util = require('util');
// use Node.js Writable, otherwise load polyfill
  var Writable = stream.Writable ||
      require('readable-stream').Writable;

  var memStore = { };

  /* Writable memory stream */
  function WMStrm(key, options) {
    // allow use without new operator
    if (!(this instanceof WMStrm)) {
      return new WMStrm(key, options);
    }
    Writable.call(this, options); // init super
    this.key = key; // save key
    memStore[key] = new Buffer(''); // empty
  }
  util.inherits(WMStrm, Writable);

  WMStrm.prototype._write = function (chunk, enc, cb) {
    // our memory store stores things in buffers
    var buffer = (Buffer.isBuffer(chunk)) ?
        chunk :  // already is Buffer use it
        new Buffer(chunk, enc);  // string, convert

    // concat to the buffer already there
    memStore[this.key] = Buffer.concat([memStore[this.key], buffer]);
    cb();
  };

// Trying our stream out
  wstream = new WMStrm('ical');
  wstream.on('finish', function () {
   // console.log('finished writing');
   // console.log('value is:', memStore.ical.toString());
    cb(undefined,opts,ical.parseICS(memStore.ical.toString()));
  });

  //URL request
  var response = request({uri:url,'headers':headers});

  setTimeout(function () {
    wstream.end();
  }, 10000);


  response.on('response', function (response) {
    // decode the stream if necessary
    if (response.headers['content-encoding'] === 'gzip')
      response = response.pipe(zlib.createGunzip());
    // Stream to String and cb
    response.pipe(wstream);
  });

};

exports.parseFile = function(filename){
  return ical.parseICS(fs.readFileSync(filename, 'utf8'))
};


var rrule = require('rrule').RRule

ical.objectHandlers['RRULE'] = function(val, params, curr, stack, line){
  curr['rrule'] = rrule.fromString(line.replace("RRULE:", ""));
  return curr
};
